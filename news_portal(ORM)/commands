(venv) PS C:\SkillFactory\Django_proj\news_portal\project> py manage.py shell
Python 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.          
(InteractiveConsole)                                                            
>>> from newapp.models import *
>>> u1 = User.objects.create_user(username = 'Viktor')
>>> u2 = User.objects.create_user(username = 'Vova')   
>>> u2
<User: Vova>
>>> Author.objects.create(autoUser=u1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\SkillFactory\Django_proj\news_portal\venv\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\SkillFactory\Django_proj\news_portal\venv\Lib\site-packages\django\db\models\query.py", line 675, in create
    obj = self.model(**kwargs)
          ^^^^^^^^^^^^^^^^^^^^
  File "C:\SkillFactory\Django_proj\news_portal\venv\Lib\site-packages\django\db\models\base.py", line 567, in __init__
    raise TypeError(
TypeError: Author() got unexpected keyword arguments: 'autoUser'
>>> Author.objects.create(authorUser=u1) 
<Author: Author object (1)>
>>> Author.objects.create(authorUser=u2) 
<Author: Author object (2)>
>>> Category.objects.create(name = 'IT')
<Category: Category object (1)>
>>> Category.objects.create(name = 'CAR') 
<Category: Category object (2)>
>>> Category.objects.create(name = 'WORK') 
<Category: Category object (3)>
>>> Category.objects.create(name = 'HOUSES') 
<Category: Category object (4)>
>>> author = Author.objects.get(id=1)
>>> author
<Author: Author object (1)>
>>> Post.objects.create(author = author, categoryType = 'AR', title = 'any', text = 'any')
<Post: Post object (1)>
>>> Post.objects.create(author = author, categoryType = 'AR', title = 'any2', text = 'any2') 
<Post: Post object (2)>
>>> Post.objects.create(author = author, categoryType = 'NW', title = 'any2', text = 'any2') 
<Post: Post object (3)>
>>> Post.objects.get(id=3).title
'any2'
>>> Post.objects.get(id=1).category.add(Category.objects.get(id=1))
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Post' object has no attribute 'category'
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1)) 
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2)) 
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=1)) 
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3)) 
>>> Commetn.objects.create(commentPost=Post.objects.get(id=1), commentUser = Author.objects.get(id=1), text = 'any')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Commetn' is not defined
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser = Author.objects.get(id=1), text = 'any') 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\SkillFactory\Django_proj\news_portal\venv\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\SkillFactory\Django_proj\news_portal\venv\Lib\site-packages\django\db\models\query.py", line 675, in create
    obj = self.model(**kwargs)
          ^^^^^^^^^^^^^^^^^^^^
  File "C:\SkillFactory\Django_proj\news_portal\venv\Lib\site-packages\django\db\models\base.py", line 543, in __init__
    _setattr(self, field.name, rel_obj)
  File "C:\SkillFactory\Django_proj\news_portal\venv\Lib\site-packages\django\db\models\fields\related_descriptors.py", line 283, in __set__
    raise ValueError(
ValueError: Cannot assign "<Author: Author object (1)>": "Comment.commentUser" must be a "User" instance.
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser = Author.objects.get(id=1).authorUser, text = 'any') 
<Comment: Comment object (1)>
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=1).like()
>>> Coment.objects.get(id=1).rating
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Coment' is not defined
>>> Comment.objects.get(id=1).rating 
2
>>> Comment.objects.get(id=1).dislake
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Comment' object has no attribute 'dislake'
>>> Comment.objects.get(id=1).dislike 
<bound method Comment.dislike of <Comment: Comment object (1)>>
>>> Comment.objects.get(id=1).dislike()
>>> Comment.objects.get(id=1).rating    
1
>>> a = Author.objects.get(id=1)
>>> a.update_rating
<bound method Author.update_rating of <Author: Author object (1)>>
>>> a.update_rating()            
>>> a.rating         
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'rating'
>>> a.ratingAuthor
1
>>> Post.objects.get(id=1).like
<bound method Post.like of <Post: Post object (1)>>
>>> Post.objects.get(id=1).like()
>>> a.update_rating()             
>>> a.ratingAuthor                      
4
>>> b = Author.objects.order_by('-ratingAuthor')
>>> b
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>]>
>>> for i in b:
... i.ratingAuthor
  File "<console>", line 2
    i.ratingAuthor
    ^
IndentationError: expected an indented block after 'for' statement on line 1
>>> for i in b:   
... i.ratingAuthor
  File "<console>", line 2
    i.ratingAuthor
    ^
IndentationError: expected an indented block after 'for' statement on line 1
>>> a.rating
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'rating'
>>> a.ratingAuthor
4
>>> for i in a:
... i.ratinAuthor 
  File "<console>", line 2
    i.ratinAuthor
    ^
IndentationError: expected an indented block after 'for' statement on line 1
>>> a.username    
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'username'
>>> for i in a:   
...     i.ratingAuthor
...     i.authorUser.username
... 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: 'Author' object is not iterable
>>> for i in b:
...     i.ratingAuthor
...     i.authorUser.username
... 
... 
... 
4
'Viktor'
0
'Vova'
>>> for i in b:    hor
...            
... 
KeyboardInterrupt
>>> 
>>> c = Post.objects.get(id=1)
>>> c.title
'any'
>>> c.dateCreation
datetime.date(2024, 2, 28)
>>> u1.post_set.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'User' object has no attribute 'post_set'
>>> u1.postRat.all()  
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'User' object has no attribute 'postRat'
>>> u1.comment_set.all()
<QuerySet [<Comment: Comment object (1)>]>
>>> u1.comment_set.all  
<bound method BaseManager.all of <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x00000172F0AD7790>>
>>> u1.comment_set.all()
<QuerySet [<Comment: Comment object (1)>]>
>>> u1.user.commetn_set.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'User' object has no attribute 'user'
>>>
